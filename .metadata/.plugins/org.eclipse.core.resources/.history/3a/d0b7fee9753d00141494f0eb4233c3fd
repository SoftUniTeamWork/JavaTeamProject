import java.awt.Button;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JButton;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

@SuppressWarnings("serial")
public class Game extends JPanel {
		public static final int WIDTH = 1000;
		public static final int HEIGHT = 700;
        Ball ball = new Ball(this);
        Racquet racquet = new Racquet(this);
        Racquet2 racquet2 = new Racquet2(this);
        private static Image background;
        /*int speed = 1;
        private int getScore(){
                return speed -1;
        }*/
        public static int count = 0;
        public static int  threadSpeed = 7;
        public static boolean chosenMode = false;
        public static boolean singlePlayer = true;
        
        JButton buttonSinglePlayer = new JButton("SinglePlayer");
        JButton buttonMultiPlayer = new JButton("MultiPlayer");
        	
        
        public Game() {
        		add(buttonSinglePlayer);
        		buttonSinglePlayer.addActionListener(new ActionListener(){
        			
        			@Override
        			public void actionPerformed(ActionEvent e){
        				// TODO Auto-generated method stub
        				singlePlayer = true;
        				chosenMode = true;
        				buttonSinglePlayer.setEnabled(false);
        				buttonMultiPlayer.setEnabled(false);
        			}
        		});
        		add(buttonMultiPlayer);
            	buttonMultiPlayer.addActionListener(new ActionListener() {
    				
    				@Override
    				public void actionPerformed(ActionEvent e) {
    					// TODO Auto-generated method stub
    					singlePlayer = false;
    					chosenMode = true;
    					buttonSinglePlayer.setEnabled(false);
    					buttonMultiPlayer.setEnabled(false);
    				}
    			});
                addKeyListener(new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent e) {
                        }
 
                        @Override
                        public void keyReleased(KeyEvent e) {
                                racquet.keyReleased(e);
                                racquet2.keyReleased(e);
                        }
 
                        @Override
                        public void keyPressed(KeyEvent e) {
                                racquet.keyPressed(e);
                                racquet2.keyPressed(e);
                        }
                        
                       
                });
                loadBackground();
                setFocusable(true);
        }
       
        private void move() {
                ball.move();
                racquet.move();
                racquet2.move();
  
        }
        
        private static void loadBackground(){
        	ImageIcon ii = new ImageIcon("lastgifs/background.png");
        	background = ii.getImage();
        }
        
        @Override
        public void paint(Graphics g) {
                super.paint(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                RenderingHints.VALUE_ANTIALIAS_ON);
                g.setColor(Color.blue);
                g.drawImage(background,0, 0, null);
                ball.paint(g2d);
                racquet.paint(g2d);
                racquet2.paint(g2d);
           
        }

        public void gameOver() {
                JOptionPane.showMessageDialog(this, "Game Over", "Game Over", JOptionPane.YES_NO_OPTION);
                System.exit(ABORT);
        }
 
        public static void main(String[] args) throws InterruptedException {
                JFrame frame = new JFrame("Mini Tennis");
                Game game = new Game();
                frame.add(game);
                frame.setSize(WIDTH,HEIGHT);
                frame.setVisible(true);
                frame.setResizable(false);
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                while (true) {
                		//game.tick();
                		if(chosenMode=true){
                			
                		
                        game.move();
                        game.repaint();
                        Thread.sleep(threadSpeed);
                		}
                }
        }
}